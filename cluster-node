-----------> SO <--------------
Carregar dois modulos de kernel

sudo swapoff -a
modprobe overlay
modprobe br_netfilter

#carregar modulos quando reiniciar
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

lsmod | grep br_netfilter
lsmod | grep overlay

mudar parametros no SO para habilitar o ip forwarding
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

sysctl --system

sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward

-----------> Runtime <--------------
runtime == containerd
apt-get install containerd -y

mkdir -p /etc/containerd
containerd config default > /etc/containerd/config.toml
systemctl status containerd.service
systemctl restart containerd

-----------> kubeadm kubelet kubectl <--------------

apt-get update

apt-get install -y apt-transport-https ca-certificates curl gpg
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

apt-get update
apt-get install -y kubelet kubeadm kubectl
apt-mark hold kubelet kubeadm kubectl

-----------> Cluster <--------------

kubeadm init
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

gerar token para adicionar node
kubeadm token create --print-join-command

->>>>>> Node

kubeadm join 10.0.1.4:6443 --token 79uosy.6x0mejs1rje7gkcs \
