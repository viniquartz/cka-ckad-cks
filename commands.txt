-> Configure alias

#alias
# vim .bashrc
source .bashrc
# alias k=kubectl
# complete -F __start_kubectl k


-> export variable
export d="--dry-run=client -o yaml"
ex: kubectl run nginx --image nginx $d or kubectl run nginx --image nginx > pod.yaml


kubectl explain -pod.spec --recursive
editar um pod rodando
kubectl edit pod 'meu-pod'

kubectl apply -f pod.yaml --force configured
kubectl replace -f pod.yaml --force deleted e replaced

kubectl exec -it pods/meu-pod -- env

kubectl delete pod 'sleep' --force --grace-period 0

kubectl run nginx --image nginx --port 80 --dry-run=client -o yaml > pod.yaml

kubectl get pod 'nginx' -o yaml
kubectl describe pod 'nginx'

dois container em um pod. exe: nginx e redis
kubectl exec -it 'nginx' -c 'nginx'-- bash


kubectl get pod -o wide
kubectl get rs -o wide

kubectl describe rs 

kubectl get deployment.apps,rs,pod

kubectl edit deployment.apps 'primeiro-deploy'

kubectl scale deployment  -replicas 5 'primeiro-deploy'

kubectl rollout history deployment 'primeiro-deploy'
kubectl describe deployment 'primeiro-deploy'

->voltar versao deployment
kubectl rollout undo --to-revision 3 deployment 'primeiro-deploy'


kubectl rollout resume/pause deployment 'primeiro-deploy'

->strategy deployment: por padrao vem rollingupdate
dentro de spec


kubectl exex -it "nome do pod" -- bash

apt update && apt install procps -y
    ps aux

### USAR O COMMAND
kubectl run command --image=nginx --command --dry-run=client -o yaml -- /bin/bash -c "sleep 1d" > command.yaml
    apiVersion: v1
    kind: Pod
    metadata:
    creationTimestamp: null
    labels:
        run: command
    name: command
    spec:
    containers:
    - command:
        - /bin/bash
        - -c
        - sleep 1d
        image: nginx
        name: command
        resources: {}
    dnsPolicy: ClusterFirst
    restartPolicy: Always
    status: {}
 

## REPLICASET
Tem a funcao de controlar o numero de pod
replica, selector, template

-> Deletar pods
    kubectl delete pods name1 name2 --force --grace-period 0 
-> Deletar replicaset
    kubectl delete rs namereplica

kubectl get rs -o wide

kubectl describe rs namereplica
kubectl exec -it podname -- env


## DEPLOYMENT
controlar e versiona replicaset de versoes de alteracoes do nosso pod

kubectl get deployments.apps,rs,pod

-> Formas de alterar um deployment
    kubectl edit deployment.apps namedeploy
    kubectl scale deployment --replicas x namedeploy

-> Ver versoes disponiveis
    kubectl rollout history deployment primeiro-deploy

-> Mudar a versao
    kubectl rollout undo --to-revision x deployment primeiro-deploy

**Quando modificar um deployment de nao alterar, verifique o deployment com o comando de rollout status
    kubectl rollout status deployment primeiro-deploy
        Waiting for deployment "primeiro-deploy" rollout to finish: 0 out of 3 new replicas have been updated...
    -> para resolver
        kubectl rollout resume deployment primeiro-deploy

### Estrategias de deployment
recreate -> recria de forma abrupta
    strategy:
      type: Recreate
rollingupdate -> permite criar strategia
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 10%
      maxUnavailable: 0


