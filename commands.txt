-> Configure alias

#alias
# vim .bashrc
source .bashrc
# alias k=kubectl
# complete -F __start_kubectl k


-> export variable
export d="--dry-run=client -o yaml"
ex: kubectl run nginx --image nginx $d or kubectl run nginx --image nginx > pod.yaml


kubectl explain -pod.spec --recursive
editar um pod rodando
kubectl edit pod 'meu-pod'

kubectl apply -f pod.yaml --force configured
kubectl replace -f pod.yaml --force deleted e replaced

kubectl exec -it pods/meu-pod -- env

kubectl delete pod 'sleep' --force --grace-period 0

kubectl run nginx --image nginx --port 80 --dry-run=client -o yaml > pod.yaml

kubectl get pod 'nginx' -o yaml
kubectl describe pod 'nginx'

dois container em um pod. exe: nginx e redis
kubectl exec -it 'nginx' -c 'nginx'-- bash


kubectl get pod -o wide
kubectl get rs -o wide

kubectl describe rs 

kubectl get deployment.apps,rs,pod

kubectl edit deployment.apps 'primeiro-deploy'

kubectl scale deployment  -replicas 5 'primeiro-deploy'

kubectl rollout history deployment 'primeiro-deploy'
kubectl describe deployment 'primeiro-deploy'

->voltar versao deployment
kubectl rollout undo --to-revision 3 deployment 'primeiro-deploy'


kubectl rollout resume/pause deployment 'primeiro-deploy'

->strategy deployment: por padrao vem rollingupdate
dentro de spec


kubectl exex -it "nome do pod" -- bash

apt update && apt install procps -y
    ps aux

### USAR O COMMAND
kubectl run command --image=nginx --command --dry-run=client -o yaml -- /bin/bash -c "sleep 1d" > command.yaml
    apiVersion: v1
    kind: Pod
    metadata:
    creationTimestamp: null
    labels:
        run: command
    name: command
    spec:
    containers:
    - command:
        - /bin/bash
        - -c
        - sleep 1d
        image: nginx
        name: command
        resources: {}
    dnsPolicy: ClusterFirst
    restartPolicy: Always
    status: {}
 

## REPLICASET
Tem a funcao de controlar o numero de pod
replica, selector, template

-> Deletar pods
    kubectl delete pods name1 name2 --force --grace-period 0 
-> Deletar replicaset
    kubectl delete rs namereplica

kubectl get rs -o wide

kubectl describe rs namereplica
kubectl exec -it podname -- env


## DEPLOYMENT
controlar e versiona replicaset de versoes de alteracoes do nosso pod

kubectl get deployments.apps,rs,pod

-> Formas de alterar um deployment
    kubectl edit deployment.apps namedeploy
    kubectl scale deployment --replicas x namedeploy

-> Ver versoes disponiveis
    kubectl rollout history deployment primeiro-deploy

-> Mudar a versao
    kubectl rollout undo --to-revision x deployment primeiro-deploy

**Quando modificar um deployment de nao alterar, verifique o deployment com o comando de rollout status
    kubectl rollout status deployment primeiro-deploy
        Waiting for deployment "primeiro-deploy" rollout to finish: 0 out of 3 new replicas have been updated...
    -> para resolver
        kubectl rollout resume deployment primeiro-deploy

### Estrategias de deployment
recreate -> recria de forma abrupta
    strategy:
      type: Recreate

rollingupdate -> permite criar strategia
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 10%
      maxUnavailable: 0


### PersisntentVolume
PV
    accessModes:
      - ReadWriteOnce
    capacity:
      storage: 1Gi
    hostPath:
      path: /volume

PVC
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi

    kubectl get pv,pvc -n day1


Visualizar configuracoes de configmap
    kubectl get cm primeiro-cm -o yaml
    kubectl describe cm primeiro-cm


Comando para ver as variaveis de um pod
    kubectl exec -it nomepod -- env

visualizar volume sem entrar no coantainer
     kubectl exec -it nginx -- ls /data

criar ConfigMap
    kubectl create configmap nameconfigmap --from-literal=ip=10.0.0.2 --from-literal=tier=web --dry-run=client -o yaml

sempre criar secrets base64 com -n
    echo -n "admin" | base64
    echo "crip" | base64 -d

criar Secrets
    kubectl create secret generic segunda-secret --from-literal=user=admin --from-literal=pass=senhasegura

### SELECIONAR CAMPOS DE SAIDA
    kubectl get pods --no-headers -o custom-columns=":metadata.name"

## TESTAR CONTAINER
    quando tem dois container no mesmo pod
    kubectl exec -it ex-3(nome pod) nginx(nome container) -- curl 0:80

para ver todos os pods em todas namespace
    kubectl get pods -A

criar pod com variaveis de ambiente
    kubectl run ex-13 --image nginx --port 80 --env=tier=web --env=environment=dev
    - env:
        - name: tier
        value: web
        - name: environment
        value: dev

## Scale
comando para alterar replicas
    kubectl scale --replicas=3 deployment/deploy-1

# show labels
kubectl get deployment.apps --show-labels


# NETWORK
-> rede de serviÃ§o
kubectl cluster-info dump | grep service-cluster-ip-range

-> rede do cluster
kubectl cluster-info dump | grep 10.44.0.0/14

criar svc usando expose
kubectl expose pod nginx --name=svc2 --type=ClusterIP --port=8080 --target-port=80 --dry-run=client -o yaml


Comando para mostrar as labels
    -> kubectl get pod --show-labels


Network POLICY
    -> kubectl get networkpolicies.networking.k8s.io


RBAC
    Verificar grupos, versoes, acoes de todos os recursos
    -> kubectl api-resources
    
    -> kubectl get role
    -> kubectl create role leitor2 --verb get,watch,list --resource secrets,pods,jobs

    SERVICE ACCOUNT
        - kubectl create sa leitor

        testar acesso
        kubectl auth can-i --help
        -> kubectl auth can-i get secrets --as system:serviceaccount:default:leitor #default(namespace) #verbs = get,create #resource = #pods, jobs

    ROLE BINDING
        kubectl create rolebindings --help
        - kubectl create rolebinding binding2 --role=leitor-secrets --serviceaccount:default:leitor
        - kubectl create clusterrolebinding binding-cr --role=leitor-secrets --serviceaccount:default:leitor-global
