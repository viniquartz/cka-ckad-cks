docker é um runtime

pod é a menor entidade, vai ser onde o container onde vai rodar
amontando de cgroups e linux namespaces

multi containers no mesmo pod compartilha mema rede e mesmo volume. e sempre vao rodar no mesmo node

docker  ENTRYPOINT  kubernetes COMMAND
        CMD                    ARGS

ENTRYPOINT é o que vai segurar a execucao
CMD é os argumentos

controlar replicas do pod com replicaset
deployment verifica versoes novas de pod e gerencia as replicas

PV - armazenamento manualmente ou dinamicamente com storageclass, ciclo de vida independente, global
PVC - solicatacao de armazenamento para o PV. nivel de namespace

emptydir - Volume efemero - dado baseado em memoria

ConfigMap e Secrets
armazenar segredos
configmap - nao criptografado, arquivos ou itens de chave e valor
secrets - criptografado em base64


NETWORK
Ser acessivel interno e externamente e tambem ser load balancer

        ClusterIP: Default, endereço interno, só é acessivel dentro do cluster.

        NodePort: ClusterIP + uma porta, com a porta pode ser acessado externamente 30000-32767

        LoadBalancer: precisa de um agente externo, geralmente cloud manager(gerenciado pelo cloud provider) faz integracao para criar

        ExternalName: cname para algo que existe fora do cluster

NETWORK POLICY

Controlar trafego entre pods, como se fosse uma acl/security group

        Ingress = entrada - from
        Egress = saida - to -> cuidar dns - regra de saida tcp e udp 53 + namespcace kubesystem

        podSelector
        namespaceSelector
        IPBlock

        em outro nivel - = or
        no mesmo nivel   = and


RBAC

Modo de acesso, autenticacao e autorizacao
cat /etc/kuberntes/manifests/kube-apiserver.yaml
--authorization-mode=Node,RBAC

Metodo:
        Cluster Role - global
        Role - aplicado em cada namespace

Nao é possivel criar regras de negacao

RESOURCES - LIMIT RANGE - QUOTAS

1 CPU == 1000m \ se quiser colocar meia cpu seria 0.5 ou 500m
memory em megabytes ou gigabytes == Mi ou Gi

requests -> fracao que vamos reservar para nosso pod tanto de cpu quanto de memoria.
limit -> é o teto que nosso recurso vai poder utilizar

requests pode ser ultrapassado o limit nao, quando chega no limit o k8s mata o pod, se for em cpu ele enfilera os processos.


LIMIT RANGE -> definir o minimo e o maximo que cada pod vai poder ter e limite para o storage


QUOTAS
-> Controlar o uso geral de recursos dentro do namespace
cpu, memory, storage, objetos de criacao

STATIC PODS
    Quando cria pods em /etc/kubernetes/manifests

DAEMON SET
    é como o kube proxy, é criado em todos os nodes



=======================
Kyverno
        -> Gerenciamento de politicas
                validate
                mutate
                create
                cleanup

